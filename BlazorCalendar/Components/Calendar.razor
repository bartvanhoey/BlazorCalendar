
   <!-- Calendar -->
<div class="calendar">
  <div class="row">
    <div class="col-sm-12 col-lg-2">
      <select name="" id="" class="fluent-input" @onchange="SelectYear">
        @for (int i = 2010; i < 2022; i++)
        {
          <option value="">@i</option>
        }
      </select>
    </div>
    <div class="col-sm-12 col-lg-2">
      <select name="" id="" class="fluent-input" @onchange=SelectMonth>
        <option value="1">January</option>
        <option value="2">February</option>
        <option value="3">March</option>
        <option value="4">April</option>
        <option value="5">May</option>
        <option value="6">June</option>
        <option value="7">July</option>
        <option value="8">August</option>
        <option value="9">September</option>
        <option value="10">October</option>
        <option value="11">November</option>
        <option value="12">December</option>
      </select>
    </div>

  </div>
  <table class="calendar-table">
    <thead>
      <tr>
        <td>Sun</td>
        <td>Mon</td>
        <td>Tue</td>
        <td>Wed</td>
        <td>Thu</td>
        <td>Fri</td>
        <td>Sat</td>
      </tr>
    </thead>
    <tbody>
      @for (int row = 0; row < rowSCount; row++)
      {
        <tr>
            @foreach (var day in days.Skip(row * 7).Take(7))
            {
              <td>
                @DayTemplate(day)
              </td>
            }
        </tr>
      }
    </tbody>
  </table>
</div>

@code {
  [Parameter] public RenderFragment<CalendarDay> DayTemplate { get; set; }

  private int year = 2020;
  private int month = 05;
  private List<CalendarDay> days = new List<CalendarDay>();
  int numberOfEmptyDays;
  int rowSCount = 0;

  void SelectYear(ChangeEventArgs e)
  {
    year = Convert.ToInt32(e.Value.ToString());
    UpdateCalendar();
  }

  void SelectMonth(ChangeEventArgs e)
  {
    month = Convert.ToInt32(e.Value.ToString());
    UpdateCalendar();
  }

  void UpdateCalendar()
  {
    days = new List<CalendarDay>();

    // calculate number of empty days
    var firstDayDate = new DateTime(year, month, 1);
    var dayOfWeek = firstDayDate.DayOfWeek;
    if (dayOfWeek == DayOfWeek.Sunday)
    {
      numberOfEmptyDays = 0;
    }
    else
    {
      numberOfEmptyDays = (int)dayOfWeek;
    }

    // Add Empty Days
    for (int i = 0; i < numberOfEmptyDays; i++)
    {
      days.Add(new CalendarDay { DayNumber = i, IsEmpty = true });
    }

    // Add the Month Days
    var numberOfDaysInMonth = DateTime.DaysInMonth(year, month);
    for (int i = 0; i < numberOfDaysInMonth; i++)
    {
      days.Add(new CalendarDay { DayNumber = i + 1, Date = new DateTime(year, month, i + 1), IsEmpty = false });
    }

    // Calculate numberOfRows
    var remaining = days.Count % 7;
    if (remaining == 0) rowSCount = days.Count / 7;
    else rowSCount = days.Count / 7 + 1;

    Console.WriteLine($"Total Rows: {rowSCount} | number of Empty Days: {numberOfEmptyDays} | Month Days: {numberOfDaysInMonth}");


  }




}